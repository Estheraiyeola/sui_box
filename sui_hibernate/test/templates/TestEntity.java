package test.templates;

import java.lang.reflect.*;
import io.sui.models.transactions.TransactionBlockResponse;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.concurrent.CompletableFuture;
import org.example.blockchain.SuiContractManager;
import org.example.models.generated.AutoGeneratedModel;

/**
* Auto-generated bridge for on-chain struct `TestEntity`.
*/
@AutoGeneratedModel(structName="TestEntity")
public class TestEntity {
    private final String objectId;
    private final SuiContractManager mgr;

        private java.lang.String name;
        private long count;

    private TestEntity(String objectId, SuiContractManager mgr) {
        this.objectId = objectId;
        this.mgr = mgr;
    }

    // Standard getters/setters
        public java.lang.String getName() { return this.name; }
        public void setName(java.lang.String v) { this.name = v; }
        public long getCount() { return this.count; }
        public void setCount(long v) { this.count = v; }

    public String getObjectId() { return objectId; }

    // Create and populate new on-chain object
    public static CompletableFuture<TestEntity> create(
        SuiContractManager mgr,
            java.lang.String name,
            long count
        ) {
            return mgr.executeMoveCall(
            mgr.getPackageId(),
            "TestEntity",
            "new",
            List.of(
                name,
                count
            )
            ).thenApply(resp -> {
            String id = resp.getEffects()
            .getCreated().get(0)
            .getReference().getObjectId();
            TestEntity m = new TestEntity(id, mgr);
                m.setName(name);
                m.setCount(count);
            return m;
        });
        }

    // Reflection‚Äêdriven registry of all generated models
    private static final Map<String, Class<?>> registry = new HashMap<>();
        static {
        // e.g. registry.put("Bar", BarModel.class); -- real code can scan package
        registry.put("TestEntity", TestEntity.class);
    }

    public static Class<?> findModelClass(String structName) {
        return registry.get(structName);
    }

    // ... more wrappers for update, delete, queryAttribute, etc. ...
    }
